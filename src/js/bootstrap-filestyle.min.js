/*
 * bootstrap-filestyle
 * doc: http://markusslima.github.io/bootstrap-filestyle/
 * github: https://github.com/markusslima/bootstrap-filestyle
 *
 * Copyright (c) 2017 Markus Vinicius da Silva Lima
 * Version 2.1.0
 * Licensed under the MIT license.
 */
!(function (e) {
  let t = 0; const i = function (t, i) { this.options = i, this.$elementFilestyle = [], this.$element = e(t); }; i.prototype = {
    clear() { this.$element.val(''), this.$elementFilestyle.find(':text').val(''), this.$elementFilestyle.find('.badge').remove(); },
    destroy() { this.$element.removeAttr('style').removeData('filestyle'), this.$elementFilestyle.remove(); },
    disabled(e) { return e !== !0 && e !== !1 ? this.options.disabled : (this.options.disabled = e, this.$element.prop('disabled', this.options.disabled), this.$elementFilestyle.find('label').prop('disabled', this.options.disabled), this.options.disabled ? this.$elementFilestyle.find('label').css('opacity', '0.65') : this.$elementFilestyle.find('label').css('opacity', '1'), void 0); },
    dragdrop(e) { return e !== !0 && e !== !1 ? this.options.dragdrop : void (this.options.dragdrop = e); },
    buttonBefore(e) { if (e === !0) this.options.buttonBefore || (this.options.buttonBefore = e, this.options.input && (this.$elementFilestyle.remove(), this.constructor(), this.pushNameFiles())); else { if (e !== !1) return this.options.buttonBefore; this.options.buttonBefore && (this.options.buttonBefore = e, this.options.input && (this.$elementFilestyle.remove(), this.constructor(), this.pushNameFiles())); } },
    input(e) { if (e === !0) this.options.input || (this.options.input = e, this.options.buttonBefore ? this.$elementFilestyle.append(this.htmlInput()) : this.$elementFilestyle.prepend(this.htmlInput()), this.pushNameFiles(), this.$elementFilestyle.find('.group-span-filestyle').addClass('input-group-btn')); else { if (e !== !1) return this.options.input; this.options.input && (this.options.input = e, this.$elementFilestyle.find(':text').remove(), this.$elementFilestyle.find('.group-span-filestyle').removeClass('input-group-btn')); } },
    size(e) { if (void 0 === e) return this.options.size; this.options.size = e; const t = this.$elementFilestyle.find('label'); const i = this.$elementFilestyle.find('input'); t.removeClass('btn-lg btn-sm'), i.removeClass('form-control-lg form-control-sm'), this.options.size != 'nr' && (t.addClass(`btn-${this.options.size}`), i.addClass(`form-control-${this.options.size}`)); },
    placeholder(e) { return void 0 === e ? this.options.placeholder : (this.options.placeholder = e, void this.$elementFilestyle.find('input').attr('placeholder', e)); },
    text(e) { return void 0 === e ? this.options.text : (this.options.text = e, void this.$elementFilestyle.find('label .text').html(this.options.text)); },
    btnClass(e) { return void 0 === e ? this.options.btnClass : (this.options.btnClass = e, void this.$elementFilestyle.find('label').attr({ class: `btn ${this.options.btnClass} btn-${this.options.size}` })); },
    badge(e) { if (e === !0) { this.options.badge = e; const t = this.pushNameFiles(); this.$elementFilestyle.find('label').append(` <span class="badge ${this.options.badgeName}">${t.length}</span>`); } else { if (e !== !1) return this.options.badge; this.options.badge = e, this.$elementFilestyle.find('.badge').remove(); } },
    badgeName(e) { return void 0 === e ? this.options.badgeName : (this.options.badgeName = e, void this.$elementFilestyle.find('.badge').attr({ class: `badge ${this.options.badgeName}` })); },
    htmlIcon(e) { return void 0 !== e && (this.options.htmlIcon = e), this.options.htmlIcon; },
    htmlInput() { return this.options.input ? `<input type="text" class="form-control ${this.options.size == 'nr' ? '' : `form-control-${this.options.size}`}" placeholder="${this.options.placeholder}" disabled> ` : ''; },
    pushNameFiles() { let e = ''; let t = []; void 0 === this.$element[0].files ? t[0] = { name: this.$element[0] && this.$element[0].value } : t = this.$element[0].files; for (let i = 0; i < t.length; i++)e += `${t[i].name.split('\\').pop()}, `; return e !== '' ? this.$elementFilestyle.find(':text').val(e.replace(/\, $/g, '')) : this.$elementFilestyle.find(':text').val(''), t; },
    constructor() {
      const i = this; let n = ''; let s = i.$element.attr('id'); let l = ''; s !== '' && s || (s = `filestyle-${t}`, i.$element.attr({ id: s }), t++), l = `<span class="group-span-filestyle ${i.options.input ? 'input-group-btn' : ''}"><label for="${s}" style="margin-bottom: 0;" class="btn ${i.options.btnClass} ${i.options.size == 'nr' ? '' : `btn-${i.options.size}`}" ${i.options.disabled || i.$element.attr('disabled') ? ' disabled="true"' : ''}>${i.htmlIcon()}<span class="buttonText">${i.options.text}</span></label></span>`, n = i.options.buttonBefore ? l + i.htmlInput() : i.htmlInput() + l, i.$elementFilestyle = e(`<div class="bootstrap-filestyle input-group"><div name="filedrag"></div>${n}</div>`), i.$elementFilestyle.find('.group-span-filestyle').attr('tabindex', '0').keypress((e) => (e.keyCode === 13 || e.charCode === 32 ? (i.$elementFilestyle.find('label').click(), !1) : void 0)), i.$element.css({ position: 'absolute', clip: 'rect(0px 0px 0px 0px)' }).attr('tabindex', '-1').after(i.$elementFilestyle), i.$elementFilestyle.find(i.options.buttonBefore ? 'label' : ':input').css({ 'border-top-left-radius': '.25rem', 'border-bottom-left-radius': '.25rem' }), i.$elementFilestyle.find('[name="filedrag"]').css({
        position: 'absolute', width: '100%', height: `${i.$elementFilestyle.height()}px`, 'z-index': -1,
      }), (i.options.disabled || i.$element.attr('disabled')) && (i.$element.attr('disabled', 'true'), i.options.disabled ? i.$elementFilestyle.find('label').css('opacity', '0.65') : i.$elementFilestyle.find('label').css('opacity', '1')), i.$element.change(() => { const e = i.pushNameFiles(); i.options.badge ? i.$elementFilestyle.find('.badge').length == 0 ? i.$elementFilestyle.find('label').append(` <span class="badge ${i.options.badgeName}">${e.length}</span>`) : e.length == 0 ? i.$elementFilestyle.find('.badge').remove() : i.$elementFilestyle.find('.badge').html(e.length) : i.$elementFilestyle.find('.badge').remove(), i.options.onChange(e); }), window.navigator.userAgent.search(/firefox/i) > -1 && i.$elementFilestyle.find('label').click(() => (i.$element.click(), !1)), e(document).on('dragover', (t) => { t.preventDefault(), t.stopPropagation(), i.options.dragdrop && e('[name="filedrag"]').css('z-index', '9'); }).on('drop', (t) => { t.preventDefault(), t.stopPropagation(), i.options.dragdrop && e('[name="filedrag"]').css('z-index', '-1'); }), i.$elementFilestyle.find('[name="filedrag"]').on('dragover', (e) => { e.preventDefault(), e.stopPropagation(); }).on('dragenter', (e) => { e.preventDefault(), e.stopPropagation(); }).on('drop', (t) => { if (t.originalEvent.dataTransfer && !i.options.disabled && i.options.dragdrop && t.originalEvent.dataTransfer.files.length) { t.preventDefault(), t.stopPropagation(), i.$element[0].files = t.originalEvent.dataTransfer.files; const n = i.pushNameFiles(); i.options.badge ? i.$elementFilestyle.find('.badge').length == 0 ? i.$elementFilestyle.find('label').append(` <span class="badge ${i.options.badgeName}">${n.length}</span>`) : n.length == 0 ? i.$elementFilestyle.find('.badge').remove() : i.$elementFilestyle.find('.badge').html(n.length) : i.$elementFilestyle.find('.badge').remove(), e('[name="filedrag"]').css('z-index', '-1'); } });
    },
  }; const n = e.fn.filestyle; e.fn.filestyle = function (t, n) { let s = ''; const l = this.each(function () { if (e(this).attr('type') === 'file') { const l = e(this); let o = l.data('filestyle'); const a = e.extend({}, e.fn.filestyle.defaults, t, typeof t === 'object' && t); o || (l.data('filestyle', o = new i(this, a)), o.constructor()), typeof t === 'string' && (s = o[t](n)); } }); return void 0 !== typeof s ? s : l; }, e.fn.filestyle.defaults = {
    text: 'Choose file', htmlIcon: '', btnClass: 'btn-secondary', size: 'nr', input: !0, badge: !1, badgeName: 'badge-light', buttonBefore: !1, dragdrop: !0, disabled: !1, placeholder: '', onChange() {},
  }, e.fn.filestyle.noConflict = function () { return e.fn.filestyle = n, this; }, e(() => {
    e('.filestyle').each(function () {
      const t = e(this); const i = {
        input: t.attr('data-input') !== 'false', htmlIcon: t.attr('data-icon'), buttonBefore: t.attr('data-buttonBefore') === 'true', disabled: t.attr('data-disabled') === 'true', size: t.attr('data-size'), text: t.attr('data-text'), btnClass: t.attr('data-btnClass'), badge: t.attr('data-badge') === 'true', dragdrop: t.attr('data-dragdrop') !== 'false', badgeName: t.attr('data-badgeName'), placeholder: t.attr('data-placeholder'),
      }; t.filestyle(i);
    });
  });
}(window.jQuery));
